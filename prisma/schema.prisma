generator client {
  provider = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String?
  emailVerified  DateTime?
  image          String?
  avatar         String?
  ownedLists     List[]   @relation("Owner")
  sharedLists    List[]   @relation("SharedWith")
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Account {
  id                String?  @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String?   @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model List {
  id        String   @id @default(cuid())
  name      String
  items     Item[]
  owner     User     @relation("Owner", fields: [ownerId], references: [id])
  ownerId   String
  sharedWith User[]  @relation("SharedWith")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id        String   @id @default(cuid())
  name      String
  completed Boolean  @default(false)
  list      List     @relation(fields: [listId], references: [id])
  listId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

