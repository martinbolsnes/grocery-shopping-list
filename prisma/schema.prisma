generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  ownedLists    List[]    @relation("Owner")
  sessions      Session[]
  sharedLists   List[]    @relation("SharedWith")

  @@map("users")
}

model Account {
  id                String?  @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model List {
  id         String   @id @default(cuid())
  name       String
  ownerId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  items      Item[]
  owner      User     @relation("Owner", fields: [ownerId], references: [id])
  sharedWith User[]   @relation("SharedWith")
}

model Item {
  id        String   @id @default(cuid())
  name      String
  completed Boolean  @default(false)
  listId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  list      List     @relation(fields: [listId], references: [id])
}
